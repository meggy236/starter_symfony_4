User:
    type: object
    config:
        description: 'The User object.'
        fields:
            userId:
                type: UUID!
            email:
                type: String!
            firstName:
                type: String
            lastName:
                type: String
            name:
                type: String
            verified:
                type: Boolean
                access: '@=hasRole("ROLE_ADMIN")'
            active:
                type: Boolean
                access: '@=hasRole("ROLE_ADMIN")'
            roles:
                type: '[Role!]'
                access: '@=isAuthenticated()'
                resolve: '@=resolver("App\\Infrastructure\\GraphQl\\Resolver\\User\\UserRoleResolver", [value])'
            # if they attempt to access this field when not admin
            # they'll get an access denied + null for the whole user
            # as this field cannot come back as null
            loginCount:
                type: Int!
                access: '@=hasRole("ROLE_ADMIN")'
            lastLogin:
                type: DateTime
                access: '@=hasRole("ROLE_ADMIN")'
