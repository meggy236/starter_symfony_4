PageMutation:
    decorator: true
    heirs: [Mutation]
    config:
        fields:
            PageAdd:
                type: PageMutationPayload!
                description: 'Add a Page.'
                public: '@=hasRole("ROLE_USER")'
                access: '@=hasRole("ROLE_USER")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\Page\\PageAddMutation", [args["page"]])'
                args:
                    page: PageAddInput!

            PageUpdate:
                type: PageMutationPayload!
                description: 'Update a Page.'
                public: '@=hasRole("ROLE_USER")'
                access: '@=hasRole("ROLE_USER")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\Page\\PageUpdateMutation", [args["page"]])'
                args:
                    page: PageUpdateInput!

            PageChangePath:
                type: PageMutationPayload!
                description: 'Change the path to a Page.'
                public: '@=hasRole("ROLE_USER")'
                access: '@=hasRole("ROLE_USER")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\Page\\PageChangePathMutation", [args["pageId"], args["newPath"]])'
                args:
                    pageId: String!
                    newPath: String!

            PagePublish:
                type: PageMutationPayload!
                description: 'Publish a Page.'
                public: '@=hasRole("ROLE_USER")'
                access: '@=hasRole("ROLE_USER")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\Page\\PagePublishMutation", [args["pageId"]])'
                args:
                    pageId: String!

            PageUnpublish:
                type: PageMutationPayload!
                description: 'Unpublish a Page.'
                public: '@=hasRole("ROLE_USER")'
                access: '@=hasRole("ROLE_USER")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\Page\\PageUnpublishMutation", [args["pageId"]])'
                args:
                    pageId: String!

            PageDelete:
                type: PageDeleteMutationPayload!
                description: 'Delete a Page.'
                public: '@=hasRole("ROLE_USER")'
                access: '@=hasRole("ROLE_USER")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\Page\\PageDeleteMutation", [args["pageId"]])'
                args:
                    pageId: String!

PageAddInput:
    type: input-object
    config:
        description: 'Page add mutation input.'
        fields:
            pageId:
                type: UUID!
            path:
                type: String!
            template:
                type: String!
            title:
                type: String!
            content:
                type: String!
                description: 'JSON string'

PageUpdateInput:
    type: input-object
    config:
        description: 'Page update mutation input.'
        fields:
            pageId:
                type: UUID!
            title:
                type: String!
            content:
                type: String!
                description: 'JSON string'

PageMutationPayload:
    type: object
    config:
        description: 'Page mutation payload.'
        fields:
            page:
                type: Page!


PageDeleteMutationPayload:
    type: object
    config:
        description: 'Page delete mutation payload.'
        fields:
            pageId:
                type: String!
