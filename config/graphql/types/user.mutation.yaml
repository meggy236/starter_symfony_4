UserMutation:
    decorator: true
    heirs: [Mutation]
    config:
        fields:
            UserUpdateProfile:
                type: UserMutationPayload!
                description: 'Update User profile.'
                public: '@=isAuthenticated()'
                access: '@=isAuthenticated()'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\UserUpdateProfileMutation", [args])'
                args:
                    user: UserUpdateProfileInput!

            ChangePassword:
                type: UserMutationPayload!
                description: 'Change User password.'
                public: '@=isAuthenticated()'
                access: '@=isAuthenticated()'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\UserPasswordMutation", [args])'
                args:
                    user: UserPasswordInput!

            UserRecoverInitiate:
                type: UserResultPayload!
                description: 'Initiate User account recovery.'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\UserRecoverInitiateMutation", [args])'
                args:
                    email: String!

            UserRecoverReset:
                type: UserResultPayload!
                description: 'Set User password with User token.'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\UserRecoverResetMutation", [args])'
                args:
                    token: String!
                    newPassword: String!

            UserVerify:
                type: UserResultPayload!
                description: 'Verify (activate) User account with password and User token.'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\UserVerifyMutation", [args])'
                args:
                    token: String!
                    password: String!

            AdminUserAdd:
                type: AdminUserMutationPayload!
                description: 'Admin User add.'
                public: '@=hasRole("ROLE_ADMIN")'
                access: '@=hasRole("ROLE_ADMIN")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\AdminUserAddMutation", [args])'
                args:
                    user: AdminUserAddInput!

            AdminUserUpdate:
                type: AdminUserMutationPayload!
                description: 'Admin User update.'
                public: '@=hasRole("ROLE_ADMIN")'
                access: '@=hasRole("ROLE_ADMIN")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\AdminUserUpdateMutation", [args])'
                args:
                    user: AdminUserUpdateInput!

            AdminUserActivate:
                type: AdminUserMutationPayload!
                description: 'Activate User by Admin.'
                public: '@=hasRole("ROLE_ADMIN")'
                access: '@=hasRole("ROLE_ADMIN")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\AdminUserActivateMutation", [args])'
                args:
                    user: AdminUserActivateInput!

            AdminUserVerify:
                type: AdminUserMutationPayload!
                description: 'Verify User by Admin.'
                public: '@=hasRole("ROLE_ADMIN")'
                access: '@=hasRole("ROLE_ADMIN")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\AdminUserVerifyMutation", [args])'
                args:
                    user: AdminUserInput!

            AdminUserSendReset:
                type: AdminUserMutationPayload!
                description: 'Send User a password reset link.'
                public: '@=hasRole("ROLE_ADMIN")'
                access: '@=hasRole("ROLE_ADMIN")'
                resolve: '@=mutation("App\\Infrastructure\\GraphQl\\Mutation\\User\\AdminUserSendResetToUserMutation", [args])'
                args:
                    user: AdminUserInput!

UserUpdateProfileInput:
    type: input-object
    config:
        description: 'User update mutation input.'
        fields:
            email:
                type: String!
            firstName:
                type: String!
            lastName:
                type: String!

UserPasswordInput:
    type: input-object
    config:
        description: 'User update mutation input.'
        fields:
            currentPassword:
                type: String!
            newPassword:
                type: String!

AdminUserAddInput:
    type: input-object
    config:
        description: 'Admin User add mutation input.'
        fields:
            userId:
                type: UUID!
            email:
                type: String!
            setPassword:
                type: Boolean!
            password:
                type: String
            role:
                type: Role!
            active:
                type: Boolean!
            firstName:
                type: String!
            lastName:
                type: String!
            sendInvite:
                type: Boolean!

AdminUserUpdateInput:
    type: input-object
    config:
        description: 'Admin User update mutation input.'
        fields:
            userId:
                type: UUID!
            email:
                type: String!
            setPassword:
                type: Boolean!
            password:
                type: String
            role:
                type: Role!
            firstName:
                type: String!
            lastName:
                type: String!

AdminUserActivateInput:
    type: input-object
    config:
        description: 'Admin User activate/deactivate mutation input.'
        fields:
            userId:
                type: UUID!
            action:
                type: String!

AdminUserInput:
    type: input-object
    config:
        description: 'Admin User mutation input.'
        fields:
            userId:
                type: UUID!

UserMutationPayload:
    type: object
    config:
        description: 'User mutation payload.'
        fields:
            success:
                type: Boolean!

UserResultPayload:
    type: object
    config:
        description: 'Payload if the User mutation was successful.'
        fields:
            success:
                type: Boolean!

AdminUserMutationPayload:
    type: object
    config:
        description: 'Admin User mutation payload.'
        fields:
            userId:
                type: UUID!
