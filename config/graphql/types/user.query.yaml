UserQuery:
    decorator: true
    heirs: [ Query ]
    config:
        fields:
            Users:
                type:        '[User!]'
                description: 'Retrieve all Users or a subset based on the passed filters.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=query("App\\Infrastructure\\GraphQl\\Query\\User\\UsersQuery", args["filters"])'
                args:
                    filters: UserFilterInput

            User:
                type:        User
                description: 'Retrieve a single User.'
                access:      '@=hasRole("ROLE_ADMIN")'
                resolve:     '@=query("App\\Infrastructure\\GraphQl\\Query\\User\\UserQuery", args["userId"])'
                args:
                    userId: UUID!

            UserEmailUnique:
                type:        UserEmailUnique!
                description: 'Check if an email address is unique. Excludes the current user.'
                access:      '@=isAuthenticated()'
                resolve:     '@=query("App\\Infrastructure\\GraphQl\\Query\\User\\UserEmailUniqueQuery", args["email"])'
                args:
                    email: String!

            UserPasswordValid:
                type:        UserPasswordValid!
                description: 'Check if the password is valid/correct for the current user.'
                access:      '@=isAuthenticated()'
                resolve:     '@=query("App\\Infrastructure\\GraphQl\\Query\\User\\UserPasswordValidQuery", args["password"])'
                args:
                    password: String!

UserFilterInput:
    type: input-object
    config:
        description: 'Available filters for querying Users. Any passed fields will be applied. Exclude the key/field to skip that filter.'
        fields:
            roles:      '[Role!]'
            email:      String
            emailExact: String
            active:     Boolean

UserEmailUnique:
    type: object
    config:
        fields:
            unique: Boolean!

UserPasswordValid:
    type: object
    config:
        fields:
            valid: Boolean!
