# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    router.request_context.host: '%env(REQUEST_CONTEXT_HOST)%'
    router.request_context.scheme: '%env(REQUEST_CONTEXT_SCHEME)%'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

        bind:
            $commandBus: '@messenger.bus.commands'
            $eventBus: '@messenger.bus.events'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,EventSourcing/Aggregate,Infrastructure/Repository,Projection,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\ProcessManager\:
        resource: '../src/ProcessManager/*ProcessManager.php'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.events' }

    # only needed to tell it which bus to use
    App\Model\User\Handler\:
        resource: '../src/Model/User/Handler/*Handler.php'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }
    App\Model\Auth\Handler\:
        resource: '../src/Model/Auth/Handler/*Handler.php'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }
    App\Model\Enquiry\Handler\:
        resource: '../src/Model/Enquiry/Handler/*Handler.php'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }

    App\EventStore\MetadataIssuedByEnricher:
        tags:
            - { name: 'prooph_event_store.metadata_enricher' }

    App\EventStore\EventStoreMessengerPlugin:
        tags:
            - { name: 'prooph_event_store.plugin' }

    App\Model\User\Service\ChecksUniqueUsersEmail: '@App\Infrastructure\Service\ChecksUniqueUsersEmailFromReadModel'

    App\Security\TokenGeneratorInterface: '@App\Security\TokenGenerator'

    App\Infrastructure\Email\EmailGateway:
        arguments:
            $postmarkApiKey: '%env(POSTMARK_API_KEY)%'
            $emailFrom: '%env(FROM_EMAIL)%'
            $emailFromName: '%env(FROM_EMAIL_NAME)%'
            $kernelEnv: '%kernel.environment%'
    App\Infrastructure\Email\EmailGatewayInterface: '@App\Infrastructure\Email\EmailGateway'

    App\Command\ProjectionRunCommand:
        arguments:
            $projectionManagerForProjectionsLocator: '@prooph_event_store.projection_manager_for_projections_locator'
            $projectionsLocator: '@prooph_event_store.projections_locator'
            $projectionReadModelLocator: '@prooph_event_store.projection_read_models_locator'
