# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # hard to find docs on this, but this is the closest I could find:
    # https://twitter.com/nicolasgrekas/status/929032213815005184
    container.dumper.inline_class_loader: true
    locale: 'en'
    router.request_context.host: '%env(REQUEST_CONTEXT_HOST)%'
    router.request_context.scheme: '%env(REQUEST_CONTEXT_SCHEME)%'
    # @todo-symfony
    user_timezone: 'America/Edmonton'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

        bind:
            $commandBus: '@messenger.bus.commands'
            $eventBus: '@messenger.bus.events'
            $adminEmail: '%env(FROM_EMAIL)%'

    _instanceof:
        GraphQL\Type\Definition\Type:
            tags: ['overblog_graphql.type']
        Overblog\GraphQLBundle\Definition\Resolver\ResolverInterface:
            tags: ['overblog_graphql.resolver']
        Overblog\GraphQLBundle\Definition\Resolver\MutationInterface:
            tags: ['overblog_graphql.mutation']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,EventSourcing/Aggregate,Infrastructure/Repository,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\ProcessManager\:
        resource: '../src/ProcessManager/*ProcessManager.php'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.events' }

    command_handlers:
        namespace: App\Model\
        resource: '../src/Model/*/Handler/*Handler.php'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }
    command_handlers_xm:
        namespace: Xm\SymfonyBundle\Model\
        resource: '../vendor/xm/symfony-bundle/Model/*/Handler/*Handler.php'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }

    Xm\SymfonyBundle\Model\User\Handler\SendActivationHandler:
        arguments:
            $templateIdOrAlias: 'auth-user_invite'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }
    Xm\SymfonyBundle\Model\User\Handler\InitiatePasswordRecoveryHandler:
        arguments:
            $templateIdOrAlias: 'auth-password_reset'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }
    App\Model\Enquiry\Handler\SendEnquiryEmailHandler:
        arguments:
            $templateIdOrAlias: 'enquiry-received'
        tags:
            - { name: 'messenger.message_handler', bus: 'messenger.bus.commands' }

    Xm\SymfonyBundle\Infrastructure\Email\EmailGateway:
        arguments:
            $postmarkApiKey: '%env(POSTMARK_API_KEY)%'
            $emailFrom: '%env(FROM_EMAIL)%'
            $emailFromName: '%env(FROM_EMAIL_NAME)%'
            $kernelEnv: '%kernel.environment%'
            $devEmail: '%env(DEV_EMAIL)%'
    Xm\SymfonyBundle\Infrastructure\Email\EmailGatewayInterface: '@Xm\SymfonyBundle\Infrastructure\Email\EmailGateway'

    Xm\SymfonyBundle\Infrastructure\Service\ProjectionRunner:
        arguments:
            $projectionsManager: '@prooph_event_store.projection_manager.app'
            $projectionManagerForProjectionsLocator: '@prooph_event_store.projection_manager_for_projections_locator'
            $projectionsLocator: '@prooph_event_store.projections_locator'
            $projectionReadModelLocator: '@prooph_event_store.projection_read_models_locator'

    # @todo-symfony delete if not using
    App\Command\SupervisorWriteConfigCommand:
        arguments:
            $kernelEnv: '%kernel.environment%'
            $kernelProjectDir: '%kernel.project_dir%'
            $logDir: '%kernel.logs_dir%'
            $supervisordProgramPrefix: '%env(SUPERVISORD_PROGRAM_PREFIX)%'

    # @todo-symfony delete if not using
    Xm\SymfonyBundle\Infrastructure\Service\Cloudflare:
        arguments:
            $cloudflareZone: '%env(CLOUDFLARE_ZONE)%'
            $cloudflareUsername: '%env(CLOUDFLARE_USERNAME)%'
            $cloudflareApiKey: '%env(CLOUDFLARE_API_KEY)%'

    # @todo-symfony delete if not using
    App\Infrastructure\Service\Supervisord:
        arguments:
            $supervisordAddress: '%env(SUPERVISORD_ADDRESS)%'
            $supervisordUsername: '%env(SUPERVISORD_USERNAME)%'
            $supervisordPassword: '%env(SUPERVISORD_PASSWORD)%'
            $supervisordProgramPrefix: '%env(SUPERVISORD_PROGRAM_PREFIX)%'
